/* ------------------------------------------------

Author: Nicholas Molyneaux
Date : 12 November 2015

Brute force approach to the n-body problem. Implemented
or the course of program parallelization for PC clusters

 ------------------------------------------------*/

#include <iostream>
#include <fstream>
#include <string>
#include <sstream>
#include <math.h>
#include <ctime>
#include <mpi.h>
#include <vector>
#include <stdexcept> // deal with exceptions

#include "Quadtree.hpp"

// --------------------------------------- 
// -------- Read into Eigen matrix -------
std::vector<double> readDataFile(const char *fileName)
{
  int nbCols = 0;
  int nbRows = 0;

  std::ifstream file;
  file.open(fileName);
  if (!file.is_open())
      throw std::invalid_argument("File not open !");

  // buffer for temp storage of values
  std::vector<double> buffer(0);
  std::string line;

  int tempCols = 0;

  while (std::getline(file, line))
    {      
      tempCols = 0;
      std::stringstream stream(line);
      double val;
      while( stream  >> val )
	{
	  buffer.push_back(val);
	  tempCols++;	  	  
	}
      if (nbCols == 0)
	nbCols = tempCols;
      nbRows++;
    }

  file.close();
  return buffer;
};



// ----------------------------------------
// ----------------- MAIN -----------------
int main(int argc, char* argv[])
{    
    int nbBodies;
    std::vector<double> data_read;
    std::vector<double> mass;
    std::vector<double> positions;
    std::vector<double> velocities;
    
    // --------------- Loading data  ----------------
    
    std::cout << "Loading data... ";    
    data_read = readDataFile(argv[1]);     
    nbBodies = data_read.size() / 5;
    if (nbBodies < 0)
	throw std::invalid_argument("Number of bodies smaller than number of nodes");
    for (int i = 0; i<nbBodies; i++)
    {
	mass.push_back(data_read[i*5]);
	positions.push_back(data_read[i*5+1]);
	positions.push_back(data_read[i*5+2]);
	velocities.push_back(data_read[i*5+3]);
	velocities.push_back(data_read[i*5+4]);
    }
    std::vector<double> positions_fixed(positions);    
    std::cout << "done" << std::endl;
    
    int dt = 60*30;
    int time_max = 365*24*60*60;  
    int t = 0;   
    
    Quadtree quad_tree =  Quadtree(0,0,3.0e11, 3.0e11,dt);
    
    for (int i = 0; i <= nbBodies; i++)
    {
	Body body(positions[2*i], positions[2*i+1], mass[i], velocities[2*i], velocities[2*i+1]);
	quad_tree.insertBody(body, quad_tree.root);
    };
    
    std::ofstream outputFile("qt_serial.csv");


    for (; t < time_max; t += dt)
    {      
	quad_tree.calculateForcesInBranch(quad_tree.root);
	
	quad_tree.printPositions(quad_tree.root, 0, outputFile);
	
	quad_tree.moveBodies(quad_tree.root);
	quad_tree.printPositions(quad_tree.root, t, outputFile);
    }
}



